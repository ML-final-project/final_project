st_set_geometry(NULL) %>%
filter(site_name %in% output[[i]]) %>%
mutate(loop = i)
output_df <- bind_rows(output_df, df)
}
output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) %>%
mutate(temp = str_pad(output_df$loop, width=3, side="left", pad="1"))
output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) #%>%
View(temp)
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) %>%
mutate(temp = paste(loop, sep="1/"))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) %>%
mutate(temp = paste(temp, sep="1/"))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad="1"))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad="0")) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad="1")) %>%
mutate(temp = str_pad(temp, width =6, side="right, pad="9))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =6, side="right", pad=9))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =6, side="right", pad=9)) %>%
mutate(temp = mdy(temp))
ggplot(temp) +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(x = "Month",
y = "Monthly average") +
transition_components(temp) +
theme_minimal()
class(temp$temp)
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =6, side="right", pad=9)) %>%
mutate(date = mdy(temp))
# Question 1
#a
mod1 <- stan_glmer(log.activity ~ (1|county), data = radon)
est_1 <- coef(mod1)[[1]]
est_1 <- rownames_to_column(est_1, "county")
mod1_est <- data.frame(se(mod1)) %>%
rownames_to_column("county_se") %>%
filter(county_se != "(Intercept)") %>%
cbind(est_1) %>%
select(-county_se) %>%
rename(intercept = `(Intercept)`,
se = `se.mod1.`) %>%
mutate(upper_bound = intercept + se,
lower_bound = intercept - se)
uranium_1 <- radon %>%
select(county, log.uranium) %>%
distinct(county, log.uranium) %>%
left_join(mod1_est, by = "county")
ggplot(uranium_1, aes(x = log.uranium, y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
ggplot(uranium_2, aes(x = log.uranium, y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
ggplot(uranium_3, aes(x = log.uranium, y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =6, side="right", pad=0)) %>%
mutate(date = mdy(temp))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =6, side="right", pad=0)) #%>%
View(temp)
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =5, side="right", pad=0)) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =5, side="right", pad=0)) %>%
mutate(date = mdy(temp))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =6, side="right", pad=0)) %>%
mutate(date = mdy(temp))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/"))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=3, side="left", pad=1)) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=5, side="left", pad=1)) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=5, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width =8, side="right", pad=0)) #%>%
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=5, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width = 6, side="right", pad = 2))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=5, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width = 6, side="right", pad = 2)) %>%
mutate(temp = str_pad(temp, width =8, side="right", pad=0))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=5, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width = 6, side="right", pad = 2)) %>%
mutate(temp = str_pad(temp, width =9, side="right", pad=0))
temp <- output_df %>%
mutate(temp = str_pad(loop, width=2, side="left", pad=0)) %>%
mutate(temp = paste0("/",temp,"/")) %>%
mutate(temp = str_pad(temp, width=5, side="left", pad=1)) %>%
mutate(temp = str_pad(temp, width = 6, side="right", pad = 2)) %>%
mutate(temp = str_pad(temp, width =9, side="right", pad=0)) %>%
mutate(date = mdy(temp))
ggplot(temp) +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(x = "Month",
y = "Monthly average") +
transition_components(temp) +
theme_minimal()
ggplot(temp) +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(x = "Month",
y = "Monthly average") +
transition_components(date) +
theme_minimal()
pm25_filtered <- pm25_avrg %>%
filter(month == "01")
dist <- data.frame(st_distance(pm25_filtered))
site_names <- pm25_filtered$site_name
colnames(dist) <- site_names
dist_df <- dist %>%
mutate_all(as.numeric)
dist_df <- dist_df %>%
mutate(site_names = site_names) %>%
select(site_names, everything())
site_names_loop <- colnames(dist_df)[2:31]
output <- list()
for (i in site_names_loop){
df <- dist_df %>%
filter(!!ensym(i) == 0) %>%
select(site_names)
output[[i]] <- df$site_names
}
pm25_avrg %>%
filter(site_name %in% output$`4TH DISTRICT COURT`) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name))
output_df <- tibble()
for (i in seq(1:30)){
df <- pm25_avrg %>%
st_set_geometry(NULL) %>%
filter(site_name %in% output[[i]]) %>%
mutate(loop = i)
output_df <- bind_rows(output_df, df)
}
View(output_df)
output_df <- tibble()
for (i in site_names_loop){
df <- pm25_avrg %>%
st_set_geometry(NULL) %>%
filter(site_name %in% output[[i]]) %>%
mutate(loop = i)
output_df <- bind_rows(output_df, df)
}
output_df <- tibble()
for (i in site_names_loop){
df <- pm25_avrg %>%
st_set_geometry(NULL) %>%
filter(site_name %in% output[[i]]) %>%
mutate(loop = i)
output_df <- bind_rows(output_df, df)
}
output <- list()
for (i in site_names_loop){
df <- dist_df %>%
filter(!!ensym(i) == 0) %>%
select(site_names)
output[[i]] <- df$site_names
}
pm25_avrg %>%
filter(site_name %in% output$`4TH DISTRICT COURT`) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name))
output_df <- tibble()
for (i in site_names_loop){
df <- pm25_avrg %>%
st_set_geometry(NULL) %>%
filter(site_name %in% output[[i]]) %>%
mutate(loop = i)
output_df <- bind_rows(output_df, df)
}
output_df %>%
group_by(loop)
output_df %>%
group_by(loop) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name))
# Question 1
#a
#use glm not glmer when you are not using predictor?
mod1 <- stan_glm(log.activity ~ (1|county), data = radon)
# Question 1
#a
#use glm not glmer when you are not using predictor?
mod1 <- stan_glmer(log.activity ~ (1|county), data = radon)
for (i in site_names_loop){
output_df %>%
filter(loop == i)
}
for (i in site_names_loop){
output_df %>%
filter(loop == i) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name))
}
for (i in site_names_loop){
p <- output_df %>%
filter(loop == i) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(title = i,
x = "Month",
y = "Monthly average")
print(p)
}
View(p)
plot_list <- list()
for (i in site_names_loop){
p <- output_df %>%
filter(loop == i) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(title = i,
x = "Month",
y = "Monthly average") +
theme_minimal()
plot_list[[i]] <- p
}
View(plot_list)
p[[2]]
p[2]
plot_list$`4TH DISTRICT COURT`
# Question 1
#a
#use glm not glmer when you are not using predictor?
mod1 <- stan_glm(log.activity ~ county - 1, data = radon)
plot_list$`CAMP LOGAN TRAILER`
est_1 <- coef(mod1)[[1]]
est_1 <- rownames_to_column(est_1, "county")
# Question 1
#a
#use glm not glmer when you are not using predictor?
mod1 <- stan_glmer(log.activity ~ county - 1, data = radon)
# Question 1
#a
#use glm not glmer when you are not using predictor?
mod1 <- stan_glmer(log.activity ~ (1|county), data = radon)
est_1 <- coef(mod1)[[1]]
est_1 <- rownames_to_column(est_1, "county")
mod1_est <- data.frame(se(mod1)) %>%
rownames_to_column("county_se") %>%
filter(county_se != "(Intercept)") %>%
cbind(est_1) %>%
select(-county_se) %>%
rename(intercept = `(Intercept)`,
se = `se.mod1.`) %>%
mutate(upper_bound = intercept + se,
lower_bound = intercept - se)
uranium_1 <- radon %>%
select(county, log.uranium) %>%
distinct(county, log.uranium) %>%
left_join(mod1_est, by = "county")
ggplot(uranium_1, aes(x = log.uranium, y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
# Question 1
#a
#use glm not glmer when you are not using predictor?
mod1 <- stan_glmer(log.activity ~ county - 1, data = radon)
View(noaa)
View(mod1)
ggplot(uranium_2, aes(x = log.uranium, y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
ggplot(uranium_3, aes(x = log.uranium, y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
# Question 3
radon_n <- left_join(radon, county_sizes, by = "county")
#write the model ???
mod4 <- stan_glmer(log.activity ~ floor + log.uranium + count + (1|county),
data = radon_n)
est_4 <- coef(mod4)[[1]]
est_4 <- rownames_to_column(est_4, "county") %>%
select(-c(floor, log.uranium, count))
mod4_est <- data.frame(se(mod4)) %>%
rownames_to_column("county_se") %>%
filter(county_se != "(Intercept)",
county_se != "floor",
county_se != "log.uranium",
county_se != "count") %>%
cbind(est_4) %>%
select(-county_se) %>%
rename(intercept = `(Intercept)`,
se = `se.mod4.`) %>%
mutate(upper_bound = intercept + se,
lower_bound = intercept - se) %>%
left_join(county_sizes, by = "county")
ggplot(mod4_est, aes(x = log(jitter(count)), y = intercept)) +
geom_pointrange(aes(ymin = lower_bound, ymax = upper_bound)) +
theme_minimal()
est_1 <- coef(mod1)[[1]]
coef(mod1)
data.frame(mod1)
rm(list = ls())
library(yaml)
library(rprojroot)
library(tidyverse)
library(lubridate)
library(snakecase)
library(sf)
library(gganimate)
setwd("~/final_project/")
make_path <- is_git_root$make_fix_file()
config <- yaml.load_file(make_path("analysis/config.yml"))
out_path <- make_path(config$build_path)
data_out <- make_path(config$data_path$merge)
source(str_c(config$group_code, "prelim.R"))
noaa <- read_csv(make_path(config$data_path$noaa,
"Chicago2010Data.csv")) %>%
set_names(to_snake_case(colnames(.))) %>%
st_as_sf(coords = c("longitude", "latitude"),
crs = 4326, remove = FALSE) %>%
st_transform("+proj=utm +zone=42N +datum=WGS84 +units=km")
pm25 <- read_csv(make_path(config$data_path$pm25,
"pm25_chicago_2010.csv")) %>%
set_names(to_snake_case(colnames(.))) %>%
st_as_sf(coords = c("site_longitude", "site_latitude"),
crs = 4326, remove = FALSE) %>%
st_transform("+proj=utm +zone=42N +datum=WGS84 +units=km") %>%
st_buffer(15) # 15km
pm25_avrg <- pm25 %>%
mutate(date = mdy(date)) %>%
mutate(month = floor_date(date, unit = "month")) %>%
group_by(month, site_name) %>%
summarise(monthly_average = mean(daily_mean_pm_2_5_concentration)) %>%
separate(month, into = c("rm", "month", "rm1"), sep = "-") %>%
select(-c(rm, rm1))
ggplot() +
geom_sf(data = pm25_avrg,
color = 'red') +
geom_sf(data = noaa,
color = 'blue') +
theme(
legend.position="none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent")
)
intersections <- st_intersection(pm25_avrg, noaa)
write.csv(intersections, str_c(data_out, "/merged_noaa_pm25.csv"))
pm25_filtered <- pm25_avrg %>%
filter(month == "01")
dist <- data.frame(st_distance(pm25_filtered))
site_names <- pm25_filtered$site_name
colnames(dist) <- site_names
dist_df <- dist %>%
mutate_all(as.numeric)
dist_df <- dist_df %>%
mutate(site_names = site_names) %>%
select(site_names, everything())
site_names_loop <- colnames(dist_df)[2:31]
output <- list()
for (i in site_names_loop){
df <- dist_df %>%
filter(!!ensym(i) == 0) %>%
select(site_names)
output[[i]] <- df$site_names
}
pm25_avrg %>%
filter(site_name %in% output$`4TH DISTRICT COURT`) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name))
output_df <- tibble()
for (i in site_names_loop){
df <- pm25_avrg %>%
st_set_geometry(NULL) %>%
filter(site_name %in% output[[i]]) %>%
mutate(loop = i)
output_df <- bind_rows(output_df, df)
}
plot_list <- list()
for (i in site_names_loop){
p <- output_df %>%
filter(loop == i) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(title = i,
x = "Month",
y = "Monthly average") +
theme_minimal()
plot_list[[i]] <- p
}
plot_list$`4TH DISTRICT COURT`
plot_list$`CAMP LOGAN TRAILER`
site_names_loop
to_snake_case(site_names_loop)
for (i in site_names_loop) {
plot_list[i]
}
plot_list
plot_list[`WASHINGTON HS`]
plot_list[30]
for (i in seq(1:30)) {
plot_list[i]
# ggsave(paste0(i, ".png"), plot = last_plot(), path = out_path)
}
for (i in seq(1:30)) {
plot_list[i]
ggsave(paste0(i, ".png"), plot = last_plot(), path = out_path)
}
plot_list[2]
for (i in seq(1:30)) {
p <- plot_list[i]
ggsave(paste0(i, ".png"), plot = p, path = out_path)
}
for (i in site_names_loop) {
p <- plot_list$i
ggsave(paste0(to_snake_case(i), ".png"), p, path = out_path)
}
for (i in site_names_loop) {
p <- plot_list$i
#  ggsave(paste0(to_snake_case(i), ".png"), p, path = out_path)
}
print(p)
for (i in site_names_loop) {
p <- plot_list[i]
#  ggsave(paste0(to_snake_case(i), ".png"), p, path = out_path)
}
print(p)
for (i in site_names_loop) {
p <- plot_list[i]
ggsave(paste0(to_snake_case(i), ".png"), p, path = out_path)
}
for (i in site_names_loop) {
plot_list[i]
ggsave(paste0(to_snake_case(i), ".png"), plot = last_plot(), path = out_path)
}
for (i in site_names_loop) {
p <- plot_list[i]
ggsave(paste0(to_snake_case(i), ".png"), plot = p, path = out_path)
}
for (i in site_names_loop) {
output_df %>%
filter(loop == i) %>%
ggplot() +
geom_line(aes(x = month, y = monthly_average, group = site_name)) +
labs(title = i,
x = "Month",
y = "Monthly average") +
theme_minimal()
ggsave(paste0(to_snake_case(i), ".png"), plot = last_plot(), path = out_path)
}
ggplot() +
geom_sf(data = pm25_avrg,
color = 'red') +
geom_sf(data = noaa,
color = 'blue') +
theme(
legend.position="none",
line = element_blank(),
rect = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_line(colour = "transparent")
)
st_difference(pm25_avrg)
