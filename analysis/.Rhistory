knitr::opts_chunk$set(echo = TRUE)
n <- 30
Z <- sample(rep(c(0,1), each = n / 2) , n) #complete rand assign -> 15 and 15
Z1 <- c(1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,0)
Ys_height <- rnorm(30, mean = 4, sd = 2) #c()
Ys_yield <- rnorm(30, mean = 2, sd = 1) #c()
Ys_alive <- c(1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0)
Results<- data.frame(assignement = Z1, height = Ys_height, yield = Ys_yield, alive = Ys_alive)
write.csv(Results, file = "Results.csv")
#index = c(1:30)
#citeation: https://stackoverflow.com/questions/10432993/named-list-to-from-data-frame
CrossTable(Ys_alive,Z1,prop.r=F,prop.t=F,prop.chisq=F)
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
CrossTable(Ys_alive,Z1,prop.r=F,prop.t=F,prop.chisq=F)
Z <- Z1
Y <- Ys_alive
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
CrossTable(Ys_height,Z1,prop.r=F,prop.t=F,prop.chisq=F)
Z <- Z1
Y <- Ys_height
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
CrossTable(Ys_yield ,Z1,prop.r=F,prop.t=F,prop.chisq=F)
Z <- Z1
Y <- Ys_yield
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
View(Results)
w_o_dead <- subset(Results,alive == 1)
View(w_o_dead)
w_o_dead <- subset(Results,alive == 1)
w_o_dead_h <- summary(lm(w_o_dead$height~w_o_dead$assignement))
w_o_dead_h
w_o_dead_y <- summary(lm(w_o_dead$yield~w_o_dead$assignement))
w_o_dead_y
Z1 <- c(1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,0)
Ys_height <- rnorm(30, mean = 4, sd = 2) #c()
Ys_yield <- rnorm(30, mean = 2, sd = 1) #c()
Ys_alive <- c(1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0)
Results<- data.frame(assignement = Z1, height = Ys_height, yield = Ys_yield, alive = Ys_alive)
write.csv(Results, file = "Results.csv")
#index = c(1:30)
#citeation: https://stackoverflow.com/questions/10432993/named-list-to-from-data-frame
diff_in_a <- summary(lm(Results$alive~Results$assignement))
diff_in_a
CrossTable(Ys_alive,Z1,prop.r=F,prop.t=F,prop.chisq=F)
Z <- Z1
Y <- Ys_alive
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
View(Results)
w_o_dead <- subset(Results,alive == 1)
w_o_dead_h <- summary(lm(w_o_dead$height~w_o_dead$assignement))
w_o_dead_h
w_o_dead_y <- summary(lm(w_o_dead$yield~w_o_dead$assignement))
w_o_dead_y
View(w_o_dead)
?read.csv
rm(list=ls())       # clear objects in memory
library(ri)         # load ri
library(gmodels)    # create tidy crosstabs
set.seed(1234567)
setwd("~/Desktop/Field Experiments/")
knitr::opts_chunk$set(echo = TRUE)
read.csv(file = "Results.csv")
setwd("~/Desktop/Field Experiments/")
read.csv2(file = "Results.csv")
Results <- read.csv2(file = "Results.csv")
View(Results)
Results <- read_csv(file = "Results.csv")
library(dplyr)
Results <- read_csv(file = "Results.csv")
library(tidyverse)
Results <- read_csv(file = "Results.csv")
View(Results)
Results <- read_csv(file = "Results.csv")
View(Results)
Results <- read_csv(file = "Results.csv")
View(Results)
Results <- read_csv(file = "Results.csv")
View(Results)
rm(list=ls())       # clear objects in memory
library(tidyverse)
library(ri)         # load ri
library(gmodels)    # create tidy crosstabs
set.seed(1234567)
setwd("~/Desktop/Field Experiments/")
knitr::opts_chunk$set(echo = TRUE)
n <- 30
Z <- sample(rep(c(0,1), each = n / 2) , n) #complete rand assign -> 15 and 15
Results <- read_csv(file = "Results.csv")
Z1 <- Results$assignement
Ys_height <- Results$Height
Ys_yield <- Results$Weight
Ys_alive <- Results$alive
Results<- data.frame(assignement = Z1, height = Ys_height, yield = Ys_yield, alive = Ys_alive)
Results <- read_csv(file = "Results.csv")
Z <- Results$assignement
Ys_height <- Results$Height
Ys_yield <- Results$Weight
Ys_alive <- Results$alive
diff_in_a <- summary(lm(Results$alive~Results$assignement))
diff_in_a
diff_in_h <- summary(lm(Results$height~Results$assignement))
diff_in_a <- summary(lm(Ys_alive~Z))
diff_in_a
diff_in_h <- summary(lm(Ys_height~Z))
diff_in_h
diff_in_y <- summary(lm(Ys_yield~Z))
diff_in_y
CrossTable(Ys_alive,Z,prop.r=F,prop.t=F,prop.chisq=F)
Y <- Ys_alive
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
CrossTable(Ys_height,Z,prop.r=F,prop.t=F,prop.chisq=F)
Y <- Ys_height
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
CrossTable(Ys_yield ,Z,prop.r=F,prop.t=F,prop.chisq=F)
Y <- Ys_yield
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
w_o_dead <- subset(Results,alive == 1)
w_o_dead_h <- summary(lm(w_o_dead$height~w_o_dead$assignement))
w_o_dead <- subset(Results,alive == 1)
w_o_dead_h <- summary(lm(w_o_dead$Height~w_o_dead$assignement))
w_o_dead_h
w_o_dead_y <- summary(lm(w_o_dead$Weight~w_o_dead$assignement))
w_o_dead_y
View(w_o_dead)
Results <- read_csv(file = "Results.csv")
Z <- Results$assignement
Ys_height <- Results$Height
Ys_yield <- Results$Weight
Ys_alive <- Results$alive
w_o_dead <- subset(Results,alive == 1)
w_o_dead_h <- summary(lm(w_o_dead$Height~w_o_dead$assignement))
w_o_dead_h
w_o_dead_y <- summary(lm(w_o_dead$Weight~w_o_dead$assignement))
w_o_dead_y
Results <- read_csv(file = "Results.csv")
Z <- Results$assignement
Ys_height <- Results$Height
Ys_yield <- Results$Weight
Ys_alive <- Results$alive
diff_in_a <- summary(lm(Ys_alive~Z))
diff_in_a
diff_in_y <- summary(lm(Ys_yield~Z))
diff_in_y
CrossTable(Ys_yield ,Z,prop.r=F,prop.t=F,prop.chisq=F)
Y <- Ys_yield
probs <- genprobexact(Z)          # generate probability of treatment
ate <- estate(Y,Z,prob=probs)     # estimate the ATE
perms <- genperms(Z,maxiter=10000)  # set the number of simulated random assignments
Ys <- genouts(Y,Z,ate=0)            # create potential outcomes under the sharp null of no effect for any unit
distout <- gendist(Ys,perms,prob=probs)  # generate the sampling distribution  based on the schedule of potential outcomes implied by the null hypothesis
ate                                 # estimated ATE
sum(distout >= ate)                 # one-tailed comparison used to calculate p-value (greater than)
sum(abs(distout) >= abs(ate))       # two-tailed comparison used to calculate p-value
dispdist(distout,ate)               # display p-values, 95% confidence interval, standard error under the null, and graph the sampling distribution under the null
summarise(Results)
summarize(Results)
summary(Results)
summary(w_o_dead)
summary(w_o_dead)
Results <- read_csv(file = "Results.csv")
Z <- Results$assignement
Ys_height <- Results$Height
Ys_yield <- Results$Weight
Ys_alive <- Results$alive
summary(Results)
number <- 1  *can actually se
number <- 1  #can actually use = too, but that's means something different in tidyverse so don't
class(number)
letter <- "hello world"
class(letter)
2+2
sum(2,2,4,10)
#concatinate: combine anything passed into fn
sequence <- c(1,2,3,4,5)
sequence <- c(1,2,3,4,5)
#same thing:
sequence <- seq(1:5)
numbers <- c(1,2,3,4,5)
letters <- c("a","b","c","d","e")
numbers.letters <- cbind(numbers, letters)
numners.letters
#same
tibble::tibble(numbers.letters)
for (i in 1:3){
plot_i <- plot_month_pm25(site_ids[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
append(plot_list, plot_i)
}
library(readr)
library(tidyverse)
library(snakecase)
library(lubridate)
library(ggplot2)
library(gridExtra)
setwd("~/Documents/GitHub/final_project/analysis")
#make_path <- is_git_root$make_fix_file() #can't use, is_git_root???
#config <- yaml.load_file(make_path("analysis/config.yml"))
#out_path <- make_path(config$build_path)
out_path <- "~/Documents/GitHub/final_project/analysis/build"
pm25_chicago <- read_csv("~/Documents/GitHub/final_project/data/pm25/pm25_chicago_2010.csv") %>%
set_names(to_snake_case(colnames(.))) %>%
mutate(date = mdy(date))
#bar plot of the avg pm25 overy the year at ea site
pm25_chicago %>%
group_by(site_name)%>%
summarize(mean_pm25 = mean(daily_mean_pm_2_5_concentration)) %>%
ggplot(aes(x = site_name, y =  mean_pm25))+
geom_bar(stat = "identity")
#line plot of avg monthly pm25 for a single station
plot_month_pm25 <- function(xi, s_name){
one_site <- pm25_chicago%>%
filter(site_id == xi)
one_site %>%
group_by(month=floor_date(date, "month")) %>%
#https://ro-che.info/articles/2017-02-22-group_by_month_r
summarize(mean_pm25 = mean(daily_mean_pm_2_5_concentration)) %>%
ggplot() +
geom_line(aes(x=month, y = mean_pm25))+
labs(title = s_name)
}
site_ids <- data.frame(unique(pm25_chicago$site_id))
plot_list <- c()
for (i in 1:3){
plot_i <- plot_month_pm25(site_ids[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
append(plot_list, plot_i)
}
View(plot_i)
plot_i
for (i in 1:2){
plot_i <- plot_month_pm25(site_ids[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
append(plot_list, plot_i)
}
plot_i
for (i in 1:2){
site_id <- data.frame(unique(pm25_chicago$site_id))
plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
append(plot_list, plot_i)
}
plot_i
setwd("~/Desktop/Regulate Firms/CSG")
#market A
D_A = read_xls(file.choose(), sheet = 1)
library("readxl")
#library("tidyverse")
library("ggplot2")
library("dplyr")
library("xlsx")
setwd("~/Desktop/Regulate Firms/CSG")
#market A
D_A = read_xls(file.choose(), sheet = 1)
demand_modelA = lm(Quantity~Price + I(Price^2), data = D_A)
demand_A <- data.frame(Price = 150:500)
demand_A$Quantity_1 <- ((demand_A$Price)^2)*0.02039 - demand_A$Price*22.39 + 6430
demand_A$Quantity_2_m <- demand_A$Quantity_1*1.1
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price <= 200, Quantity_2_m+(2214-2047), Quantity_2_m))
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price <= 300 & Price > 200, Quantity_2_m+(1195-1020), Quantity_2_d))
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price > 300, Quantity_2_m+(549-502), Quantity_2_d))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price <= 200, Quantity_3_m+(2214-2047), Quantity_3_m))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price <= 300 & Price > 200, Quantity_3_m+(1195-1020), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price > 300, Quantity_3_m+(549-502), Quantity_3_d))
demand_A$Quantity_3_m <- demand_A$Quantity_2_m*1.1
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price <= 200, Quantity_2_m+(2214-2047), Quantity_2_m))
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price <= 300 & Price > 200, Quantity_2_m+(1195-1020), Quantity_2_d))
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price > 300, Quantity_2_m+(549-502), Quantity_2_d))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price <= 200, Quantity_3_m+(2214-2047), Quantity_3_m))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price <= 300 & Price > 200, Quantity_3_m+(1195-1020), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price > 300, Quantity_3_m+(549-502), Quantity_3_d))
ggplot(data = demand_A) +
geom_line(aes(x=Quantity_2_d, y=Price, color = '2 firms period 2')) +
geom_line(aes(x=Quantity_1, y=Price, color = '1 firm period 1')) +
geom_line(aes(x=Quantity_3_d, y=Price, color = '2 firms period 3')) +
#geom_line(aes(x=Q4, y=price, color = '4 firms')) +
#geom_hline(aes(yintercept = 235.5)) +
#geom_line(aes(y=(entryc_over_life)/Q1+capital_cost_per_period+MC, x = Q1, color='AVC?')) +
labs(title = 'Demand in Mkt A period 1 and 2',x = "Q", y = "Price")
write.csv(demand_A, "demand_A.csv")
demand_A <- mutate(demand_A,Quantity_2_q=ifelse(Price <= 200, Quantity_2_m+(2343-2047), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_2_q=ifelse(Price <= 300 & Price > 200, Quantity_2_m+(1319-1020), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_2_q=ifelse(Price > 300, Quantity_2_m+(653-502), Quantity_3_d))
demand_A$check <- demand_A$Quantity_2_m  - demand_A$Quantity_2_d
demand_A <- mutate(demand_A,Quantity_3_q=ifelse(Price <= 200, Quantity_3_m+(2343-2047), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_q=ifelse(Price <= 300 & Price > 200, Quantity_3_m+(1319-1020), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_q=ifelse(Price > 300, Quantity_3_m+(653-502), Quantity_3_d))
ggplot(data = demand_A) +
geom_line(aes(x=Quantity_2_d, y=Price, color = '2 firms period 2')) +
geom_line(aes(x=Quantity_1, y=Price, color = '1 firm period 1')) +
geom_line(aes(x=Quantity_3_d, y=Price, color = '2 firms period 3')) +
geom_line(aes(x=Quantity_3_q, y=price, color = '4 firms')) +
#geom_hline(aes(yintercept = 235.5)) +
#geom_line(aes(y=(entryc_over_life)/Q1+capital_cost_per_period+MC, x = Q1, color='AVC?')) +
labs(title = 'Demand in Mkt A period 1 and 2',x = "Q", y = "Price")
ggplot(data = demand_A) +
geom_line(aes(x=Quantity_2_d, y=Price, color = '2 firms period 2')) +
geom_line(aes(x=Quantity_1, y=Price, color = '1 firm period 1')) +
geom_line(aes(x=Quantity_3_d, y=Price, color = '2 firms period 3')) +
geom_line(aes(x=Quantity_3_q, y=Price, color = '4 firms period 3')) +
#geom_hline(aes(yintercept = 235.5)) +
#geom_line(aes(y=(entryc_over_life)/Q1+capital_cost_per_period+MC, x = Q1, color='AVC?')) +
labs(title = 'Demand in Mkt A period 1 and 2',x = "Q", y = "Price")
write.csv(demand_A, "demand_A.csv")
demand_modelA = lm(Quantity~Price + I(Price^2), data = D_A)
demand_A <- data.frame(Price = 150:500)
rm(list=ls())
library("readxl")
#library("tidyverse")
library("ggplot2")
library("dplyr")
library("xlsx")
setwd("~/Desktop/Regulate Firms/CSG")
#market A
D_A = read_xls(file.choose(), sheet = 1)
#market A
D_A = read_xls(file.choose(), sheet = 1)
demand_modelA = lm(Quantity~Price + I(Price^2), data = D_A)
demand_A <- data.frame(Price = 150:500)
demand_A$Quantity_1 <- ((demand_A$Price)^2)*0.02039 - demand_A$Price*22.39 + 6430
demand_A$Quantity_2_m <- demand_A$Quantity_1*1.1
demand_A$Quantity_3_m <- demand_A$Quantity_2_m*1.1
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price <= 200, Quantity_2_m+(2214-2047), Quantity_2_m))
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price <= 300 & Price > 200, Quantity_2_m+(1195-1020), Quantity_2_d))
demand_A <- mutate(demand_A,Quantity_2_d=ifelse(Price > 300, Quantity_2_m+(549-502), Quantity_2_d))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price <= 200, Quantity_3_m+(2214-2047), Quantity_3_m))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price <= 300 & Price > 200, Quantity_3_m+(1195-1020), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_d=ifelse(Price > 300, Quantity_3_m+(549-502), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_q=ifelse(Price <= 200, Quantity_3_m+(2343-2047), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_q=ifelse(Price <= 300 & Price > 200, Quantity_3_m+(1319-1020), Quantity_3_d))
demand_A <- mutate(demand_A,Quantity_3_q=ifelse(Price > 300, Quantity_3_m+(653-502), Quantity_3_d))
write.csv(demand_A, "demand_A.csv")
demand_modelC = lm(Quantity~Price, data = D_C)
D_C = read_xls(file.choose(), sheet = 3)
demand_modelC = lm(Quantity~Price, data = D_C)
demand_C <- data.frame(Price = 50:400)
demand_C$Quantity_1 <- (471.78899 - demand_C$Price*0.98884)
demand_C$Quantity_2_m <- demand_C$Quantity_1*1.2
demand_C$Quantity_3_m <- demand_C$Quantity_2_m*1.2
demand_C <- mutate(demand_C,Quantity_2_d=ifelse(Price <= 150, Quantity_2_m+(467-427), Quantity_2_m))
demand_C <- mutate(demand_C,Quantity_2_d=ifelse(Price <= 250 & Price > 150, Quantity_2_m+(357-268), Quantity_2_d))
demand_C <- mutate(demand_C,Quantity_2_d=ifelse(Price > 250, Quantity_2_m+(268-182), Quantity_2_d))
demand_C <- mutate(demand_C,Quantity_3_d=ifelse(Price <= 150, Quantity_3_m+(467-427), Quantity_3_m))
demand_C <- mutate(demand_C,Quantity_3_d=ifelse(Price <= 250 & Price > 150, Quantity_3_m+(357-268), Quantity_3_d))
demand_C <- mutate(demand_C,Quantity_3_d=ifelse(Price > 250, Quantity_3_m+(268-182), Quantity_3_d))
demand_C <- mutate(demand_C,Quantity_3_t=ifelse(Price <= 150, Quantity_3_m+(496-427), Quantity_3_m))
demand_C <- mutate(demand_C,Quantity_3_t=ifelse(Price <= 250 & Price > 150, Quantity_3_m+(376-268), Quantity_3_m))
demand_C <- mutate(demand_C,Quantity_3_t=ifelse(Price > 250, Quantity_3_m+(261-182), Quantity_3_d))
ggplot(data = demand_C) +
geom_line(aes(x=Quantity_2_d, y=Price, color = '2 firms period 2')) +
geom_line(aes(x=Quantity_1, y=Price, color = '1 firm period 1')) +
geom_line(aes(x=Quantity_3_t, y=Price, color = '3 firms period 3'))
write.csv(demand_C, "demand_C.csv")
rm(list=ls())
library(readr)
library(tidyverse)
library(snakecase)
library(lubridate)
library(ggplot2)
library(gridExtra)
setwd("~/Documents/GitHub/final_project/analysis")
#make_path <- is_git_root$make_fix_file() #can't use, is_git_root???
#config <- yaml.load_file(make_path("analysis/config.yml"))
#out_path <- make_path(config$build_path)
out_path <- "~/Documents/GitHub/final_project/analysis/build"
pm25_chicago <- read_csv("~/Documents/GitHub/final_project/data/pm25/pm25_chicago_2010.csv") %>%
set_names(to_snake_case(colnames(.))) %>%
mutate(date = mdy(date))
#line plot of avg monthly pm25 for a single station
plot_month_pm25 <- function(xi, s_name){
one_site <- pm25_chicago%>%
filter(site_id == xi)
one_site %>%
group_by(month=floor_date(date, "month")) %>%
#https://ro-che.info/articles/2017-02-22-group_by_month_r
summarize(mean_pm25 = mean(daily_mean_pm_2_5_concentration)) %>%
ggplot() +
geom_line(aes(x=month, y = mean_pm25))+
labs(title = s_name)
}
for (i in 1:2){
plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
append(plot_list, plot_i)
}
site_ids <- data.frame(unique(pm25_chicago$site_id))  #should put in a fn to clean the envi....
myplots <- vector('list', ncol(pm25_chicago)) #not sure about the length arg
for (i in 1:2){
#plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
#append(plot_list, plot_i)
myplots[[i]] <- local{
pi <- plot_month_pm25(site_id[i,1], i)
print(pi)
}
}
for (i in 1:2){
#plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
#append(plot_list, plot_i)
myplots[[i]] <- local({
pi <- plot_month_pm25(site_id[i,1], i)
print(pi)
})
}
for (i in 1:2){
#plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
#append(plot_list, plot_i)
myplots[[i]] <- local({
pi <- plot_month_pm25(site_ids[i,1], i)
print(pi)
})
}
for (i in 1:2){
#plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
#append(plot_list, plot_i)
myplots[[i]] <- local({
pi <- plot_month_pm25(site_ids[i,1], site_id[i,1])
print(pi)
})
}
for (i in 1:2){
#plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
#append(plot_list, plot_i)
myplots[[i]] <- local({
pi <- plot_month_pm25(site_ids[i,1], site_ids[i,1])
print(pi)
})
}
View(myplots)
View(myplots)
grid.arrange(for (i in 1:2){
#plot_i <- plot_month_pm25(site_id[i,1], i)
#plot_month_pm25(site_ids[i,1], i) #whoops, uncommented wrong one!
#append(plot_list, plot_i)
myplots[[i]] <- local({
pi <- plot_month_pm25(site_ids[i,1], site_ids[i,1])
print(pi)
})
})
p <- list()
for(i in 1:4){
p[[i]] <- plot_month_pm25(site_ids[i,1], site_ids[i,1])
}
do.call(grid.arrange,p)
p <- list()
for(i in 1:30){
p[[i]] <- plot_month_pm25(site_ids[i,1], site_ids[i,1])
}
do.call(grid.arrange,p)
big_plot <- do.call(grid.arrange,p)
ggsave("seasonality_pm25_stations_all.png", big_plot, path = out_path)
rm(list=ls())
